# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

#ball and paddle positions
ball_pos = [(WIDTH/2), (HEIGHT/2)]
paddle1_pos = HEIGHT/2 #left paddle
paddle2_pos = HEIGHT/2 #right paddle

#ball and paddle velocities
ball_vel = [(random.randrange(120,240)/60), (random.randrange(60,180)/60)]

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2, HEIGHT/2]
    ball_vel[1] = -random.randrange(60, 180)/60
    if RIGHT == True:
        ball_vel[0] = random.randrange(120,240)/60
    else:
        ball_vel[0] = -random.randrange(120,240)/60

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = HEIGHT/2
    paddle2_pos = HEIGHT/2
    paddle1_vel = 0
    paddle2_vel = 0
    score1 = 0
    score2 = 0
    spawn_ball(0 == 5)
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global paddle1_vel, paddle2_vel
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball, keep ball on screen
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if (ball_pos[1] >= (HEIGHT - BALL_RADIUS)) or (ball_pos[1] <= BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
    #check to see if player 2 scores or ball is returned
    if ball_pos[0] <= (PAD_WIDTH + BALL_RADIUS):
        if ball_pos[1] < (paddle1_pos - HALF_PAD_HEIGHT):
            spawn_ball(RIGHT)
            score2 += 1
        elif ball_pos[1] > (paddle1_pos + HALF_PAD_HEIGHT):
            spawn_ball(RIGHT)
            score2 += 1
        else: #if not score, return ball
            ball_vel[0] = -ball_vel[0] * 1.1
    #check to see if player 1 scores or ball is returned
    if ball_pos[0] >= (WIDTH - PAD_WIDTH - BALL_RADIUS):
        if ball_pos[1] < (paddle2_pos - HALF_PAD_HEIGHT):
            spawn_ball(RIGHT)
            score2 += 1
        elif ball_pos[1] > (paddle2_pos + HALF_PAD_HEIGHT):
            spawn_ball(RIGHT)
            score1 += 1
        else: #if not score, return ball
            ball_vel[0] = -ball_vel[0] * 1.1
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, 'Red', 'Yellow')
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos < HALF_PAD_HEIGHT and paddle1_vel < 0:
        paddle1_vel = 0
    if paddle2_pos < HALF_PAD_HEIGHT and paddle2_vel < 0:
        paddle2_vel = 0
    if paddle1_pos > (HEIGHT - HALF_PAD_HEIGHT) and paddle1_vel > 0:
        paddle1_vel = 0
    if paddle2_pos > (HEIGHT - HALF_PAD_HEIGHT) and paddle2_vel > 0:
        paddle2_vel = 0
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
        
    # draw paddles
    canvas.draw_polygon([(0, paddle1_pos-HALF_PAD_HEIGHT), (0, paddle1_pos+HALF_PAD_HEIGHT), (PAD_WIDTH-2, paddle1_pos+HALF_PAD_HEIGHT),(PAD_WIDTH-2,paddle1_pos-HALF_PAD_HEIGHT)], PAD_WIDTH-1, "Red","Red")
    canvas.draw_polygon([(WIDTH, paddle2_pos-HALF_PAD_HEIGHT), (WIDTH, paddle2_pos+HALF_PAD_HEIGHT), (WIDTH-PAD_WIDTH+2, paddle2_pos+HALF_PAD_HEIGHT),(WIDTH-PAD_WIDTH+2,paddle2_pos-HALF_PAD_HEIGHT)], PAD_WIDTH-1, "Red","Red")
    
    # determine whether paddle and ball collide    
    
    # draw scores
    canvas.draw_text(("Player 1: " +str(score1)), (150, 50), 25, "White")
    canvas.draw_text(("Player 2: " +str(score2)), (450, 50), 25, "White")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = -4
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = 4
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = -4
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = 4
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game, 100)


# start frame
new_game()
frame.start()
